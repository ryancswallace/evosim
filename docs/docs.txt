Module evosim
-------------
Central module of evosim package.

Variables
---------
agents

controller

environment

population

Classes
-------
Controller 
    Coordinates flow over time.

    Ancestors (in MRO)
    ------------------
    evosim.Controller
    __builtin__.object

    Instance variables
    ------------------
    environment

    num_time_steps

    population

    Methods
    -------
    __init__(self, population, evironment, num_time_steps)

    run(self)
        Steps through entire time span.

Environment 
    Describes the selcting pressures of the surroundings.

    Ancestors (in MRO)
    ------------------
    evosim.Environment
    __builtin__.object

    Descendents
    -----------
    evosim.SimpleEnvironment

    Instance variables
    ------------------
    capacities

    populations

    Methods
    -------
    __init__(self, populations, capacities)
        Args:
        populations (list) : list of populations
        capacities (list): list of carrying capacaties of each population

Population 
    Describes a collection of interacting agents.

    Ancestors (in MRO)
    ------------------
    evosim.Population
    __builtin__.object

    Descendents
    -----------
    evosim.SimplePopulation

    Instance variables
    ------------------
    agents

    count

    mutation_rate

    Methods
    -------
    __init__(self, agents, mutation_rate=0.1)
        Args:
        agents (list): list of DataFrames of action probabilities for each agent
        mutation_rate (float): default mutation rate

    birth(self, new_agents)
        Args:
        new_agents (DataFrame or list): action probabilities for single or multiple new agents

    die(self, dying_agents)
        Args:
        dying_agents (int or list): agent name(s) of agents to kill

    draw_actions(self, agents=None, actions=None, samples=1)
        Args:
                agents (int or list): agent name(s) of agents to take action. Default all agents in population
                actions (int or list): choice name(s) of choices to draw. Default all choices
                samples (int): number of samples to draw. Default 1 sample
        Returns:
                actions (int, Series, or DataFrame): int if single agent and action, Series if single agent OR action,
                                                                                         DataFrame if all actions and agents

    update_action_probs(self, updates, agent=None, choice=None)
        Args:
        updates (Series, DataFrame, or Panel): Series if agent and choice specified, DataFrame if agent OR choice
                                                                                   specified, Panel if neither specified
        agent (int): agent number to update 
        choice (int): choice number to update

SimpleEnvironment 
    Environment with a sinlge population.

    Ancestors (in MRO)
    ------------------
    evosim.SimpleEnvironment
    evosim.Environment
    __builtin__.object

    Instance variables
    ------------------
    capacities

    populations

    Methods
    -------
    __init__(self, population, capacity)
        Args:
        populations (list) : list of populations
        capacities (list): list of carrying capacaties of each population

    get_utilities(self, actions)

SimplePopulation 
    Population subclass with simple reproduction, mutation, and natural selection schemes.

    Ancestors (in MRO)
    ------------------
    evosim.SimplePopulation
    evosim.Population
    __builtin__.object

    Instance variables
    ------------------
    agents

    count

    mutation_rate

    Methods
    -------
    __init__(self, agents, mutation_rate=0.1)
        Args:
        agents (list): list of DataFrames of action probabilities for each agent
        mutation_rate (float): default mutation rate

    birth(self, new_agents)
        Args:
        new_agents (DataFrame or list): action probabilities for single or multiple new agents

    die(self, dying_agents)
        Args:
        dying_agents (int or list): agent name(s) of agents to kill

    draw_actions(self, agents=None, actions=None, samples=1)
        Args:
                agents (int or list): agent name(s) of agents to take action. Default all agents in population
                actions (int or list): choice name(s) of choices to draw. Default all choices
                samples (int): number of samples to draw. Default 1 sample
        Returns:
                actions (int, Series, or DataFrame): int if single agent and action, Series if single agent OR action,
                                                                                         DataFrame if all actions and agents

    mutate(self, mutation_rate=None)
        Args:
        mutation_rate (Series): override to default mutation rate

    reproduce(self, utilities)
        Args:
        utilities (Series): utilities of each agent in population

    select(self, utilities)
        Args:
        utilities (Series): utilities of each agent in population

    update_action_probs(self, updates, agent=None, choice=None)
        Args:
        updates (Series, DataFrame, or Panel): Series if agent and choice specified, DataFrame if agent OR choice
                                                                                   specified, Panel if neither specified
        agent (int): agent number to update 
        choice (int): choice number to update
